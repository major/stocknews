name: Main

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Run checks
        run: make check

  tox:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
      fail-fast: false
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: .tox
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox tox-gh-actions

      - name: Test with tox
        run: tox

  container:
    needs: tox
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAGS: v1 ${{ github.sha }}
      IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
      REGISTRY_USER: ${{ github.actor }}
      REGISTRY_PASSWORD: ${{ github.token }}
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Build Image
        id: build
        uses: redhat-actions/buildah-build@main
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          extra-args: "--squash"

      - name: Push To GitHub Container Registry
        uses: redhat-actions/push-to-registry@main
        id: push
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"